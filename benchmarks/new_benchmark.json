{
  "name": "ObfuscationBenchmark",
  "problems": [
    {
        "identifier": "Problem1",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns a new list with each integer squared. The function should handle any list size.\n\nPrototype: def square_list(numbers):",
        "test_suite": "test_suite_1.py"
    },
    {
        "identifier": "Problem2",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns the number of vowels in the string. The function should be case-insensitive.\n\nPrototype: def count_vowels(s):",
        "test_suite": "test_suite_2.py"
    },
    {
        "identifier": "Problem3",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that checks if a given word is a palindrome. A palindrome is a word that reads the same forwards and backwards.\n\nPrototype: def is_palindrome(word):",
        "test_suite": "test_suite_3.py"
    },
    {
        "identifier": "Problem4",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that merges two sorted lists into a single sorted list.\n\nPrototype: def merge_sorted_lists(list1, list2):",
        "test_suite": "test_suite_4.py"
    },
    {
        "identifier": "Problem5",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that finds the second largest number in a list of integers. Assume the list has at least two elements.\n\nPrototype: def second_largest(numbers):",
        "test_suite": "test_suite_5.py"
    },
    {
        "identifier": "Problem6",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that converts a Roman numeral string to an integer. Assume the Roman numeral is valid and represents a number less than 4000.\n\nPrototype: def roman_to_int(s):",
        "test_suite": "test_suite_6.py"
    },
    {
        "identifier": "Problem7",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that checks whether a given number is prime. The function should return `True` if the number is prime, and `False` otherwise.\n\nPrototype: def is_prime(number):",
        "test_suite": "test_suite_7.py"
    },
    {
        "identifier": "Problem8",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of numbers and returns the list in reverse order.\n\nPrototype: def reverse_list(numbers):",
        "test_suite": "test_suite_8.py"
    },
    {
        "identifier": "Problem9",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes two strings and returns `True` if they are anagrams of each other; otherwise, it returns `False`. Two strings are anagrams if they are made of the same letters in a different order.\n\nPrototype: def are_anagrams(str1, str2):",
        "test_suite": "test_suite_9.py"
    },
    {
        "identifier": "Problem10",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that calculates the nth Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1.\n\nPrototype: def fibonacci(n):",
        "test_suite": "test_suite_10.py"
    },
    {
        "identifier": "Problem11",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that converts a binary string to its decimal equivalent. The binary string will represent a non-negative integer.\n\nPrototype: def binary_to_decimal(binary_str):",
        "test_suite": "test_suite_11.py"
    },
    {
        "identifier": "Problem12",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that finds the greatest common divisor (GCD) of two non-negative integers.\n\nPrototype: def gcd(a, b):",
        "test_suite": "test_suite_12.py"
    },
    {
        "identifier": "Problem13",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns a new list containing only the even numbers from the original list.\n\nPrototype: def filter_even_numbers(numbers):",
        "test_suite": "test_suite_13.py"
    },
    {
        "identifier": "Problem14",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of numbers and returns the sum of all the numbers in the list.\n\nPrototype: def sum_of_list(numbers):",
        "test_suite": "test_suite_14.py"
    },
    {
        "identifier": "Problem15",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of strings and returns a new list with each string reversed.\n\nPrototype: def reverse_strings(strings):",
        "test_suite": "test_suite_15.py"
    },
    {
        "identifier": "Problem16",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes an integer and returns a string representation of that integer in binary format.\n\nPrototype: def int_to_binary(number):",
        "test_suite": "test_suite_16.py"
    },
    {
        "identifier": "Problem17",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that calculates the sum of all even numbers in a given range (inclusive).\n\nPrototype: def sum_even_in_range(start, end):",
        "test_suite": "test_suite_17.py"
    },
    {
        "identifier": "Problem18",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that checks if a number is a perfect square. A perfect square is an integer that is the square of an integer.\n\nPrototype: def is_perfect_square(number):",
        "test_suite": "test_suite_18.py"
    },
    {
        "identifier": "Problem19",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns the largest product that can be made by multiplying any three numbers from the list.\n\nPrototype: def max_triplet_product(numbers):",
        "test_suite": "test_suite_19.py"
    },
    {
        "identifier": "Problem20",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns a new string with each character repeated once.\n\nPrototype: def repeat_characters(s):",
        "test_suite": "test_suite_20.py"
    },
    {
        "identifier": "Problem21",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes two integers, `start` and `end`, and returns a list of all prime numbers between `start` and `end` (inclusive).\n\nPrototype: def list_primes(start, end):",
        "test_suite": "test_suite_21.py"
    },
    {
        "identifier": "Problem22",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of numbers and returns the average of all the numbers in the list.\n\nPrototype: def average_of_list(numbers):",
        "test_suite": "test_suite_22.py"
    },
    {
        "identifier": "Problem23",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a string and returns the longest substring without repeating characters.\n\nPrototype: def longest_non_repeating_substring(s):",
        "test_suite": "test_suite_23.py"
    },
    {
        "identifier": "Problem24",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes an integer `n` and returns a list of the first `n` numbers of the Fibonacci sequence.\n\nPrototype: def first_n_fibonacci(n):",
        "test_suite": "test_suite_24.py"
    },
    {
        "identifier": "Problem25",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a positive integer `n` and returns the number of unique ways to climb `n` stairs, given that you can either climb 1 or 2 steps at a time.\n\nPrototype: def climb_stairs(n):",
        "test_suite": "test_suite_25.py"
    },
    {
        "identifier": "Problem26",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns `True` if the string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Other characters are ignored.\n\nPrototype: def is_valid_palindrome(s):",
        "test_suite": "test_suite_26.py"
    },
    {
        "identifier": "Problem27",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns a new list with each element replaced by the product of all other elements in the original list. Do not use division in your solution.\n\nPrototype: def product_except_self(numbers):",
        "test_suite": "test_suite_27.py"
    },
    {
        "identifier": "Problem28",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes an integer array and a target value and returns the indices of the two numbers such that they add up to the target. Assume that each input has exactly one solution, and the same element cannot be used twice.\n\nPrototype: def two_sum(nums, target):",
        "test_suite": "test_suite_28.py"
    },
    {
        "identifier": "Problem29",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a non-negative integer `n` and returns the nth number in the Look-and-Say sequence. The Look-and-Say sequence starts with 1 and each subsequent number is derived by describing the previous number in terms of consecutive digits.\n\nPrototype: def look_and_say(n):",
        "test_suite": "test_suite_29.py"
    },
    {
        "identifier": "Problem30",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns a new string with the first character of each word capitalized and all other letters in lowercase.\n\nPrototype: def capitalize_words(s):",
        "test_suite": "test_suite_30.py"
    },
    {
        "identifier": "Problem31",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns the length of the longest consecutive elements sequence. The sequence has to be strictly increasing.\n\nPrototype: def longest_consecutive_sequence(numbers):",
        "test_suite": "test_suite_31.py"
    },
    {
        "identifier": "Problem32",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a non-empty string and returns the most frequently occurring character. In case of a tie, return the earliest character in the input order.\n\nPrototype: def most_frequent_character(s):",
        "test_suite": "test_suite_32.py"
    },
    {
        "identifier": "Problem33",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a string representing a sentence and returns the longest word in the sentence. In case of a tie, return the first longest word.\n\nPrototype: def longest_word(sentence):",
        "test_suite": "test_suite_33.py"
    },
    {
        "identifier": "Problem34",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes an array of integers and returns a new array where each integer is the sum of itself and all previous numbers in the array.\n\nPrototype: def running_sum(nums):",
        "test_suite": "test_suite_34.py"
    },
    {
        "identifier": "Problem35",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that checks if a given string contains any duplicates characters. The function should return `True` if duplicates are found, and `False` otherwise.\n\nPrototype: def has_duplicates(s):",
        "test_suite": "test_suite_35.py"
    },
    {
        "identifier": "Problem36",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of integers and returns a list of the same integers in a randomized order.\n\nNote: You can assume that a function `randomize()` is available which takes a list and returns it in a randomized order.\n\nPrototype: def randomize_list(numbers):",
        "test_suite": "test_suite_36.py"
    },
    {
        "identifier": "Problem37",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a string of parentheses and checks if the order of the parentheses is valid. The function should return `True` if the string is valid, and `False` otherwise.\n\nPrototype: def valid_parentheses(s):",
        "test_suite": "test_suite_37.py"
    },
    {
        "identifier": "Problem38",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns a new string where every character is replaced by the next character in the English alphabet. If the character is 'z', replace it with 'a'.\n\nPrototype: def shift_characters(s):",
        "test_suite": "test_suite_38.py"
    },
    {
        "identifier": "Problem39",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes an integer `n` and returns a list of the first `n` prime numbers.\n\nPrototype: def first_n_primes(n):",
        "test_suite": "test_suite_39.py"
    },
    {
        "identifier": "Problem40",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns a boolean indicating whether or not it's a valid IPv4 address. A valid IPv4 address consists of exactly four octets, each octet is between 0 and 255, and they are separated by '.'.\n\nPrototype: def is_valid_ipv4(address):",
        "test_suite": "test_suite_40.py"
    },
    {
        "identifier": "Problem41",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes an array of integers and returns a new array of the same integers where each element is replaced by the greatest element on its right. Replace the last element with -1.\n\nPrototype: def replace_with_greatest_on_right(nums):",
        "test_suite": "test_suite_41.py"
    },
    {
        "identifier": "Problem42",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of integers and returns a list of the same integers in ascending order. You cannot use the built-in sort or sorted functions.\n\nPrototype: def custom_sort(nums):",
        "test_suite": "test_suite_42.py"
    },
    {
        "identifier": "Problem43",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes an integer `n` and returns all possible unique combinations of `n` pairs of parentheses. The combinations must be valid parentheses combinations.\n\nPrototype: def generate_parentheses(n):",
        "test_suite": "test_suite_43.py"
    },
    {
        "identifier": "Problem44",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of numbers and returns the majority element. The majority element is the element that appears more than half the time in the list. You may assume that the majority element always exists.\n\nPrototype: def majority_element(nums):",
        "test_suite": "test_suite_44.py"
    },
    {
        "identifier": "Problem45",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns a list containing only the elements that appear an odd number of times in the original list.\n\nPrototype: def odd_occurrences(nums):",
        "test_suite": "test_suite_45.py"
    },
    {
        "identifier": "Problem46",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a non-negative integer `n` and returns the `n`th ugly number. An ugly number is a positive number whose prime factors are limited to 2, 3, and 5.\n\nPrototype: def nth_ugly_number(n):",
        "test_suite": "test_suite_46.py"
    },
    {
        "identifier": "Problem47",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a string and returns the minimum number of characters to be added to make the string a palindrome.\n\nPrototype: def min_chars_for_palindrome(s):",
        "test_suite": "test_suite_47.py"
    },
    {
        "identifier": "Problem48",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of integers and rearranges the list so that all odd numbers come before all even numbers. The relative order of odd and even numbers should remain the same.\n\nPrototype: def rearrange_odd_even(nums):",
        "test_suite": "test_suite_48.py"
    },
    {
        "identifier": "Problem49",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes an array of integers and returns the first missing positive integer. The array may contain duplicates and negative numbers.\n\nPrototype: def first_missing_positive(nums):",
        "test_suite": "test_suite_49.py"
    },
    {
        "identifier": "Problem50",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a non-negative integer `n` and returns a list of all the binary numbers with `n` digits in ascending order.\n\nPrototype: def binary_numbers(n):",
        "test_suite": "test_suite_50.py"
    },
    {
        "identifier": "Problem51",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a non-empty string and returns a boolean indicating whether the string can be segmented into a space-separated sequence of one or more dictionary words. Assume the dictionary is provided as a set of strings.\n\nPrototype: def word_break(s, dictionary):",
        "test_suite": "test_suite_51.py"
    },
    {
        "identifier": "Problem52",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes an integer `n` and returns the total count of all possible unique BST (Binary Search Tree) structures that can be made with nodes numbered from 1 to `n`.\n\nPrototype: def count_unique_bsts(n):",
        "test_suite": "test_suite_52.py"
    },
    {
        "identifier": "Problem53",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns the maximum product of two integers in the list. The function should find two different integers in the list such that their product is maximum.\n\nPrototype: def max_product(nums):",
        "test_suite": "test_suite_53.py"
    },
    {
        "identifier": "Problem54",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string representing a time in 24-hour format (e.g., '23:15') and returns the next closest time using the same digits. The next closest time should be within the next 24 hours.\n\nPrototype: def next_closest_time(time):",
        "test_suite": "test_suite_54.py"
    },
    {
        "identifier": "Problem55",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes two strings, `s1` and `s2`, and returns `True` if `s2` is a rotation of `s1`. For example, if `s1` is 'abcde' and `s2` is 'deabc', then `s2` is a rotation of `s1`.\n\nPrototype: def is_rotation(s1, s2):",
        "test_suite": "test_suite_55.py"
    },
    {
        "identifier": "Problem56",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of integers and returns a list of tuples, each containing a pair of numbers from the list that sum up to zero. The function should not return duplicate pairs.\n\nPrototype: def zero_sum_pairs(nums):",
        "test_suite": "test_suite_56.py"
    },
    {
        "identifier": "Problem57",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes an array of integers and returns the length of the longest increasing subsequence in the array. A subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\n\nPrototype: def length_of_lis(nums):",
        "test_suite": "test_suite_57.py"
    },
    {
        "identifier": "Problem58",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string containing digits from 2 to 9 inclusive and returns all possible letter combinations that the number could represent. A mapping of digit to letters is given just like on the telephone buttons. For example, 2 maps to 'abc', 3 to 'def', and so on.\n\nPrototype: def letter_combinations(digits):",
        "test_suite": "test_suite_58.py"
    },
    {
        "identifier": "Problem59",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a positive integer `n` and returns the sum of all the digits of `n` until it is reduced to a single digit.\n\nPrototype: def digital_root(n):",
        "test_suite": "test_suite_59.py"
    },
    {
        "identifier": "Problem60",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of integers and returns a new list where each element is replaced by the sum of all other elements in the original list.\n\nPrototype: def sum_of_others(nums):",
        "test_suite": "test_suite_60.py"
    },
    {
        "identifier": "Problem61",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes two strings representing binary numbers and returns their sum as a binary string. The input strings are non-empty and contain only characters '1' or '0'.\n\nPrototype: def add_binary(a, b):",
        "test_suite": "test_suite_61.py"
    },
    {
        "identifier": "Problem62",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes an integer array and returns the length of the longest consecutive elements sequence. The array may contain duplicates.\n\nPrototype: def longest_consecutive(nums):",
        "test_suite": "test_suite_62.py"
    },
    {
        "identifier": "Problem63",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of numbers and returns the smallest positive integer greater than 0 that does not occur in the list.\n\nPrototype: def smallest_missing_positive(nums):",
        "test_suite": "test_suite_63.py"
    },
    {
        "identifier": "Problem64",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns a new string where each vowel is replaced by the next vowel in the sequence ('a' -> 'e', 'e' -> 'i', etc.), and each consonant is replaced by the next consonant in alphabetical order.\n\nPrototype: def shift_characters_vowels_and_consonants(s):",
        "test_suite": "test_suite_64.py"
    },
    {
        "identifier": "Problem65",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a string containing parentheses and returns the length of the longest valid (well-formed) parentheses substring.\n\nPrototype: def longest_valid_parentheses(s):",
        "test_suite": "test_suite_65.py"
    },
    {
        "identifier": "Problem66",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a non-empty list of non-negative integers representing an elevation map where the width of each bar is 1. The function should return how much water it can trap after raining.\n\nPrototype: def trap_rain_water(heights):",
        "test_suite": "test_suite_66.py"
    },
    {
        "identifier": "Problem67",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes two strings and returns the minimum number of steps to make the strings anagrams of each other. A step can be either inserting, deleting, or replacing a character.\n\nPrototype: def min_steps_to_anagram(s1, s2):",
        "test_suite": "test_suite_67.py"
    },
    {
        "identifier": "Problem68",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of integers and returns the maximum sum of non-adjacent elements in the list.\n\nPrototype: def max_sum_non_adjacent(nums):",
        "test_suite": "test_suite_68.py"
    },
    {
        "identifier": "Problem69",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a string and returns the longest palindrome that can be formed by deleting characters from the string. The function should return the palindrome in lexicographical order if there are multiple palindromes of the same length.\n\nPrototype: def longest_palindrome_by_deletion(s):",
        "test_suite": "test_suite_69.py"
    },
    {
        "identifier": "Problem70",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of strings and returns the string that appears the most frequently. If there is a tie, return the string that appears first in the list.\n\nPrototype: def most_frequent_string(strings):",
        "test_suite": "test_suite_70.py"
    },
    {
        "identifier": "Problem71",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes an integer array and returns the maximum difference between any pair of elements such that the larger element comes after the smaller element.\n\nPrototype: def max_difference(nums):",
        "test_suite": "test_suite_71.py"
    },
    {
        "identifier": "Problem72",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns a new string with all vowels removed.\n\nPrototype: def remove_vowels(s):",
        "test_suite": "test_suite_72.py"
    },
    {
        "identifier": "Problem73",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a string and returns the length of the longest substring without repeating characters.\n\nPrototype: def longest_substring_without_repeating(s):",
        "test_suite": "test_suite_73.py"
    },
    {
        "identifier": "Problem74",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes an integer `n` and returns a list of all prime factors of `n`.\n\nPrototype: def prime_factors(n):",
        "test_suite": "test_suite_74.py"
    },
    {
        "identifier": "Problem75",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns the product of all the numbers except the maximum number in the list. If the list contains duplicates of the maximum number, consider all of them in the calculation.\n\nPrototype: def product_except_max(nums):",
        "test_suite": "test_suite_75.py"
    },
    {
        "identifier": "Problem76",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of integers and a target integer. The function should find two integers in the list that add up to the target integer and return their indices. If no such pair exists, return `None`.\n\nPrototype: def two_sum_indices(nums, target):",
        "test_suite": "test_suite_76.py"
    },
    {
        "identifier": "Problem77",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a non-empty list of non-negative integers and returns the third maximum number in this list. If it does not exist, return the maximum number.\n\nPrototype: def third_max(nums):",
        "test_suite": "test_suite_77.py"
    },
    {
        "identifier": "Problem78",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of strings and a string containing a pattern, and returns all strings in the list that match the pattern. A string matches the pattern if there are jokers (represented by '?') in the pattern that can replace any character.\n\nPrototype: def match_pattern(strings, pattern):",
        "test_suite": "test_suite_78.py"
    },
    {
        "identifier": "Problem79",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and a target sum. The function should return a boolean indicating whether any three integers in the list sum up to the target sum.\n\nPrototype: def three_sum_exists(nums, target):",
        "test_suite": "test_suite_79.py"
    },
    {
        "identifier": "Problem80",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns the first non-repeating character in it. If there is no non-repeating character, return `None`.\n\nPrototype: def first_non_repeating_char(s):",
        "test_suite": "test_suite_80.py"
    },
    {
        "identifier": "Problem81",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a string and returns the longest palindromic substring in the string.\n\nPrototype: def longest_palindromic_substring(s):",
        "test_suite": "test_suite_81.py"
    },
    {
        "identifier": "Problem82",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes two sorted lists of integers and merges them into a single sorted list.\n\nPrototype: def merge_sorted_lists(list1, list2):",
        "test_suite": "test_suite_82.py"
    },
    {
        "identifier": "Problem83",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes an integer `n` and returns a list of all distinct, valid combinations of `n` pairs of parentheses.\n\nPrototype: def generate_parenthesis(n):",
        "test_suite": "test_suite_83.py"
    },
    {
        "identifier": "Problem84",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns the number of times a complete 'abc' sequence appears.\n\nPrototype: def count_abc_sequences(s):",
        "test_suite": "test_suite_84.py"
    },
    {
        "identifier": "Problem85",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes an integer array and a target sum. The function should find all unique quadruplets in the array that sum up to the target sum.\n\nPrototype: def four_sum(nums, target):",
        "test_suite": "test_suite_85.py"
    },
    {
        "identifier": "Problem86",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns a boolean indicating whether the string is a valid number. A valid number can include integers, decimals, and optionally a sign ('+' or '-').\n\nPrototype: def is_valid_number(s):",
        "test_suite": "test_suite_86.py"
    },
    {
        "identifier": "Problem87",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns the number of unique triplets in the list that sum up to zero.\n\nPrototype: def three_sum_zero(nums):",
        "test_suite": "test_suite_87.py"
    },
    {
        "identifier": "Problem88",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns the length of the longest consecutive run of the same character.\n\nPrototype: def longest_consecutive_char(s):",
        "test_suite": "test_suite_88.py"
    },
    {
        "identifier": "Problem89",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns the number of pairs of integers in the list that have a difference of 2.\n\nPrototype: def count_pairs_with_difference(nums):",
        "test_suite": "test_suite_89.py"
    },
    {
        "identifier": "Problem90",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a string and returns the string in reversed order. However, words should stay in the same order.\n\nPrototype: def reverse_string_keep_words_order(s):",
        "test_suite": "test_suite_90.py"
    },
    {
        "identifier": "Problem91",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes an integer array and returns the sum of the elements between the two largest numbers in the array, not including the largest numbers themselves. If there are duplicates of the largest number, consider the first occurrence as the start/end point.\n\nPrototype: def sum_between_largest(nums):",
        "test_suite": "test_suite_91.py"
    },
    {
        "identifier": "Problem92",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a non-empty string and returns the most frequently occurring word in the string. If there is more than one such word, return the one that appears first in the string.\n\nPrototype: def most_frequent_word(s):",
        "test_suite": "test_suite_92.py"
    },
    {
        "identifier": "Problem93",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a string representing a mathematical expression and evaluates it. The expression will contain only non-negative integers, '+', '-', '*' operators, and no parentheses.\n\nPrototype: def evaluate_expression(expr):",
        "test_suite": "test_suite_93.py"
    },
    {
        "identifier": "Problem94",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of integers and returns a new list where each element at index `i` is the product of all the numbers in the original array except the one at `i`. Do not use division.\n\nPrototype: def product_except_self(nums):",
        "test_suite": "test_suite_94.py"
    },
    {
        "identifier": "Problem95",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes two strings representing binary numbers and returns their product as a binary string. The input strings are non-empty and contain only characters '1' or '0'.\n\nPrototype: def multiply_binary(a, b):",
        "test_suite": "test_suite_95.py"
    },
    {
        "identifier": "Problem96",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of integers and returns the number of smaller elements to the right of each element in the list.\n\nPrototype: def smaller_elements_right(nums):",
        "test_suite": "test_suite_96.py"
    },
    {
        "identifier": "Problem97",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes a list of integers and returns a list of the same integers in ascending order, using a bubble sort algorithm.\n\nPrototype: def bubble_sort(nums):",
        "test_suite": "test_suite_97.py"
    },
    {
        "identifier": "Problem98",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a non-empty list of non-negative integers. Each element in the list represents the maximum number of steps that can be made forward from that element. The function should return a boolean indicating whether the end of the list can be reached starting from the first element.\n\nPrototype: def can_jump_to_end(nums):",
        "test_suite": "test_suite_98.py"
    },
    {
        "identifier": "Problem99",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nWrite a Python function that takes an integer `n` and returns a list of all prime numbers less than `n`.\n\nPrototype: def primes_less_than(n):",
        "test_suite": "test_suite_99.py"
    },
    {
        "identifier": "Problem100",
        "prompt": "You will act as a code generator. Generate Python code to solve the problem below. The output should be executable Python code only, without comments or extra text.\n\nCreate a Python function that takes a list of integers and returns a new list where each element is the sum of its neighbors and itself. For example, given `[1, 2, 3, 4]`, the function should return `[3, 6, 9, 7]` (since 3 = 1+2, 6 = 1+2+3, etc.).\n\nPrototype: def sum_with_neighbors(nums):",
        "test_suite": "test_suite_100.py"
    }
  ]
}